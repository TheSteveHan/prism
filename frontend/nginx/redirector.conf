server {
    # Listen on plain old HTTP and catch all requests so they can be redirected
    # to HTTPS instead.
    listen 80 default_server reuseport;
    listen [::]:80 default_server reuseport;

    # Anything requesting this particular URL should be served content from
    # Certbot's folder so the HTTP-01 ACME challenges can be completed for the
    # HTTPS certificates.
    location '/.well-known/acme-challenge' {
        default_type "text/plain";
        root /var/www/letsencrypt;
    }


    # Proxy API requests to backend on port 8008
    #location /api/ {
    #    proxy_pass http://api-service:8008/api/;
    #    proxy_set_header Host $host;
    #    proxy_set_header X-Real-IP $remote_addr;
    #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    proxy_set_header X-Forwarded-Proto $scheme;
    #}

    # Proxy cors anywhere requests to backend on port
    #location /http {
    #    if ($request_uri ~ ^/http([^?]*) ) {
    #      set $cors_request_uri $1;
    #    }
    #    # docker resolver
    #    resolver 127.0.0.11 ipv6=off;
    #    proxy_set_header Origin "www.google.com";
    #    proxy_buffer_size   128k;
    #    proxy_buffers   4 256k;
    #    proxy_busy_buffers_size   256k;
    #    proxy_pass http://cors-anywhere:80/http$cors_request_uri$is_args$args;
    #    #proxy_pass http://api-service:8008/http$cors_request_uri$is_args$args;
    #}

    # Serve frontend files from frontend/dist
    #location / {
    #    root /var/www;
    #    index index.html;
    #    try_files $uri $uri/ /index.html;
    #}

    # Everything else gets shunted over to HTTPS for each user defined
    # server to handle.
    location / {
        return 301 https://$http_host$request_uri;
    }
}
