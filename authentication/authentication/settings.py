"""
Django settings for authentication project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import django
import os
import datetime
from datetime import timedelta

import dj_database_url
from pathlib import Path


BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'SOMErandomsecretkey')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "True") == "True"
APPLE_SIGN_IN_CERT = os.getenv("APPLE_SIGN_IN_CERT", "SOMECERTVALUE")

ALLOWED_HOSTS = ['*']
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
PROFILE_SERVER = os.environ.get('PROFILE_SERVER', 'localhost:5000')
FE_SERVER = os.environ.get('FE_SERVER', 'localhost:3002')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'user',
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.apple",
    'stripe_payment',
    'referral',
    'waffle',
    'avatar',
    'drip'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'user.csrf.DisableCSRF',
    'user.cookie.UserCookieMiddleWare',
    'user.middleware.ActivationMiddleWare',
    'authentication.views.referal_middleware'
]

ROOT_URLCONF = 'authentication.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins': ['user.templatetags.email_open_tracking_img_link'],
        },
    },
]

WSGI_APPLICATION = 'authentication.wsgi.application'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': dj_database_url.parse(
        os.environ.get("DB_URL", "postgres://postgres:postgres@localhost:5432/bc-auth"),
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = []
'''

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
'''


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = os.getenv("DJANGO_STATIC_ROOT", BASE_DIR / "static")
STATIC_URL = "/accounts/static/"

STATICFILES_DIRS = []

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
}

# Django Rest Framework - SimpleJWT
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html

DJANGO_JWT_SIGNING_KEY = os.getenv("DJANGO_JWT_SIGNING_KEY")
assert DJANGO_JWT_SIGNING_KEY
REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "user.serializers.UserDetailsSerializer",
    "JWT_SERIALIZER": "user.serializers.CustomJWTSerializer",
    "JWT_SERIALIZER_WITH_EXPIRATION": "user.serializers.CustomJWTSerializerWithExpiration",
}
REST_USE_JWT = True
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=365),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=365),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": DJANGO_JWT_SIGNING_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("JWT"),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

ACCOUNT_ADAPTER = "authentication.views.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "authentication.views.SocialAccountAdapter"
SOCIALACCOUNT_PROVIDERS = {
    "apple": {
        "APP": {
            # Your service identifier.
            "client_id": "com.bloomscroll.web, com.bloomscroll",
            # The Key ID (visible in the "View Key Details" page).
            "secret": "SECRET",
            # Member ID/App ID Prefix -- you can find it below your name
            # at the top right corner of the page, or itâ€™s your App ID
            # Prefix in your App ID.
            "key": "KEY",
            # The certificate you downloaded when generating the key.
            "certificate_key": APPLE_SIGN_IN_CERT,
        }
    }
}

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
PASSWORD_RESET_TIMEOUT_DAYS = 1

# django all auth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
ACCOUNT_EMAIL_SUBJECT_PREFIX = ''

SITE_ID=int(os.environ.get("SITE_ID", 1))
EMAIL_BACKEND = 'user.middleware.LoggingEmailBackend'
EMAIL_USE_SSL = True
EMAIL_HOST = os.environ.get("SMTP_HOSTNAME", 'email-smtp.us-west-2.amazonaws.com')
EMAIL_PORT = 465
EMAIL_HOST_USER = os.environ.get("SMTP_USERNAME", '')
EMAIL_HOST_PASSWORD = os.environ.get("SMTP_PASSWORD", '')
EMAIL_TIMEOUT = 10
DEFAULT_FROM_EMAIL = os.environ.get("EMAIL_FROM", "Bloom Scroll<noreply@bloomscroll.com>")
ADMIN_EMAILS = os.environ.get("ADMIN_EMAILS", "").split(',')


AUTH_USER_MODEL = 'user.CustomUser'
ACCOUNT_FORMS = {
    'signup': 'user.forms.CustomSignupForm'
}

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'filters': {
		'require_debug_false': {
			'()': 'django.utils.log.RequireDebugFalse',
		},
		'require_debug_true': {
			'()': 'django.utils.log.RequireDebugTrue',
		},
	},
	'formatters': {
		'django.server': {
			'()': 'django.utils.log.ServerFormatter',
			'format': '[%(server_time)s] %(message)s',
		}
	},
	'handlers': {
		'console': {
			'level': 'INFO',
			'filters': ['require_debug_true'],
			'class': 'logging.StreamHandler',
		},
		'console_debug_false': {
			'level': 'ERROR',
			'filters': ['require_debug_false'],
			'class': 'logging.StreamHandler',
		},
		'django.server': {
			'level': 'INFO',
			'class': 'logging.StreamHandler',
			'formatter': 'django.server',
		},
	},
	'loggers': {
		'django': {
			'handlers': ['console', 'console_debug_false'],
			'level': 'INFO',
		},
		'django.server': {
			'handlers': ['django.server'],
			'level': 'INFO',
			'propagate': False,
		},
        'user.middleware':{
			'handlers': ['console'],
			'level': 'INFO',
        }
	}
}

#Drip campaign
DRIP_FROM_EMAIL = "contact@bloomscroll.com"
DRIP_SCHEDULE_SETTINGS = {
    'DRIP_SCHEDULE': True,
    'DRIP_SCHEDULE_DAY_OF_WEEK': '*',
    'DRIP_SCHEDULE_HOUR': '*',
    'DRIP_SCHEDULE_MINUTE': '*',
}
